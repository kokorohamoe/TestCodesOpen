#
#

global_CountCompare = 0;
global_CountSwap    = 0;


def CompareLarge( a , i, j):
	global global_CountCompare
	global_CountCompare=global_CountCompare+1;
	return True if( a[i] > a[j] ) else False

def CompareSmall( a , i, j):
	global global_CountCompare
	global_CountCompare=global_CountCompare+1;
	return True if( a[i] < a[j] ) else False


def Swap( a , i , j):
	global global_CountSwap
	global_CountSwap=global_CountSwap+1;
	temp = a[i]
	a[i] = a[j]
	a[j] = temp
	return a

target_origin = [1 , 2 , 3, 4, 5, 6 , 6,5,4,3,2,1]
target_origin = range(12,0,-1)
print("target_origin")
print(target_origin)


def sortLarge ( target , istart , iend ,jstart,jend ):
	for i in range(istart,iend):
		print(target,i)
		for j in range(jstart,jend):
			if(CompareLarge(target,j,j+1)):
				target = Swap(target,j,j+1)
	print(target,"END")

def sortLargeLen ( target , istart , ilen ,jstart,jlen ):
	return sortLarge(target,istart,ilen-1,jstart,jlen-1)

def sortLargeReverse ( target , istart , iend ,jstart,jend ):
	for i in reversed(range(istart,iend)):
		print(target,i)
		for j in reversed(range(jstart,jend)):
#			print(target,[i,j,target[j-1],target[j]])
			if(CompareLarge(target,j,j+1)):
				target = Swap(target,j,j+1)
	print(target,"END")
				

def sortLargeReverseLen ( target , istart , ilen ,jstart,jlen ):
	print(istart,ilen-1)
	return sortLargeReverse(target,istart,ilen-1,jstart,jlen-1)


import threading

target1 = list ( target_origin );
thread1 = threading.Thread(target=sortLargeLen, args=([target1,0,len(target1)/2+1,0,len(target1)]))
thread1.start()

target3 = list ( target_origin );
thread3 = threading.Thread(target=sortLargeReverseLen, args=([target3,0,len(target3)/2+1,0,len(target3)]))
thread3.start()

print("Answer")
print(target1,global_CountCompare,global_CountSwap)
print(target3)
print(target3[0:6],target1[6:12])

#>>> print(target1,global_CountCompare,global_CountSwap)
#([6, 5, 4, 3, 2, 1, 7, 8, 9, 10, 11, 12], 132, 102)
#>>> print(target3)
#[1, 2, 3, 4, 5, 6, 12, 11, 10, 9, 8, 7]
#>>> print(target3[0:6],target1[6:12])
#([1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12])


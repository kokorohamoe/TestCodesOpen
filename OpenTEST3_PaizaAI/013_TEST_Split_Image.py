#
#


import cv2
import numpy


for i in range(100):
    file = ('images/image%03d.png' % i )
    file_img = cv2.imread(file)
    height, width, channels = file_img.shape
    height_start = 0
    height_end   = height/2
    width_start = 0
    width_end   = width/2
    clipped = file_img[height_start:height_end,width_start:width_end,:]
    print(file_img.shape)
    print(clipped.shape)
    file = ('images/image%03d_0.png' % i )
    cv2.imwrite(file,clipped)
    
#    print(height)
#    print(width)
    
#    clipped = file_img[0:0,100:100]
#    file = ('images/image%03d_0.png' % i )
#    cv2.imwrite(file,clipped)




for c in range(C_MAX):
	print( type(images[c][0] ) ) 


images_data =  [[] for j in range(C_MAX)]
for c in range(C_MAX):
	print("Initialize:%d BEGIN" % c)
	images_data[c] = numpy.empty((100,len(images[c][0].ravel())),int)
	if debug:
		print("Type;%s" % (target_name[c]))
		print("\timages_data type=%s" % (type(images_data[c])))
		print("\timages[c][0] type=%s" % (type(images[c][0])))
	for i in range(100):
		print(i)
		[images[c][i].ravel()]
		images_data[c][i] = numpy.array ([images[c][i].ravel()])
	print("Initialize:%d END" % c)


import sklearn
import sklearn.model_selection
import sklearn.model_selection.train_test_split



X_TRAIN = 0
X_TEST  = 1
Y_TRAIN = 2
Y_TEST  = 3
Y_PREDICT = 4

DEM_X = 0
DEM_Y = 1
TYPE_TRAIN  =0
TYPE_TEST   =1
TYPE_PREDICT=2



#for c in range(C_MAX):
#	pakapaka[c] = sklearn.model_selection.train_test_split(images_data[c], targets_data['Kirishima'], random_state=0)
#	pakapaka[c].append( [] )

if debug:
	for c in range(C_MAX):
		print("Type;%s" % (target_name[c]))
		print("\timages_data type=%s" % (type(images_data[c])))
#		print("\timages_datavshape=%s" % (str(images_data[c].shape)))

pakapaka = [[] for j in range(C_MAX)]

for c in range(C_MAX):
	print("sklearn split :%d BEGIN" % c)
	bikini =  sklearn.model_selection.train_test_split(images_data[c], targets_data['Kirishima'], random_state=0) ;
	pakapaka[c] = [ [ [],[] ],[ [],[],[] ] ]
	pakapaka[c][DEM_X][TYPE_TRAIN] = bikini[X_TRAIN]
	pakapaka[c][DEM_X][TYPE_TEST ] = bikini[X_TEST]
	pakapaka[c][DEM_Y][TYPE_TRAIN] = bikini[Y_TRAIN]
	pakapaka[c][DEM_Y][TYPE_TEST ] = bikini[Y_TEST]
	print("sklearn split :%d END" % c)

if debug :
	import sklearn
	from sklearn.model_selection import train_test_split
	from sklearn.neighbors import KNeighborsClassifier
	X_train, X_test, Y_train, Y_test = train_test_split(images_data[0], targets_data['Kirishima'], random_state=0)
	print(X_train.shape)
	print(X_test.shape)
	print(Y_train.shape)
	print(Y_test.shape)
	knn_debug = KNeighborsClassifier(n_neighbors=1)
	knn_debug.fit(X_train, Y_train)
	Y_pred = knn_debug.predict(X_test)
	print(numpy.mean(Y_pred == Y_test))

if debug :
	for c in range( C_MAX ) :
		import sklearn
		from sklearn.model_selection import train_test_split
		from sklearn.neighbors import KNeighborsClassifier
		print("KNeighborsClassifier\n\tType;%s" % (target_name[c]))
		print(pakapaka[c][DEM_X][TYPE_TRAIN].shape)
		print(pakapaka[c][DEM_X][TYPE_TEST].shape)
		print(pakapaka[c][DEM_Y][TYPE_TRAIN].shape)
		print(pakapaka[c][DEM_Y][TYPE_TEST].shape)
		knn_debug = KNeighborsClassifier(n_neighbors=1)
		knn_debug.fit(pakapaka[c][DEM_X][TYPE_TRAIN], pakapaka[c][DEM_Y][TYPE_TRAIN])
		Y_pred = knn_debug.predict(pakapaka[c][DEM_X][TYPE_TEST])
		print(numpy.mean(Y_pred == pakapaka[c][DEM_Y][TYPE_TEST]))
		pakapaka[c][DEM_Y][TYPE_PREDICT] = Y_pred


print(knn.predict(np.array([X_test[0]])))
print(knn.predict(np.array([X_test[0], X_test[1], X_test[2], X_test[3]])))
print(knn.predict(knn.predict(X_test)))

y_pred = knn.predict(X_test)
print(numpy.mean(y_pred == y_test))


#for c in range(C_MAX):
#	print( len(pakapaka[c]) )


for c in range(C_MAX):
	print("Type=%s" % target_name[c]);
#	print("\tDEM_X:%d" % len( pakapaka[c][DEM_X] ))
#	print("\tDEM_Y:%d" % len( pakapaka[c][DEM_Y] ))
	print("\tX_TRAIN.shape:"+str ( pakapaka[c][DEM_X][TYPE_TRAIN].shape ))
	print("\tX_TEST.shape:"+str ( pakapaka[c][DEM_X][TYPE_TEST].shape ))
#	print("\tY_TRAIN.shape:"+str ( pakapaka[c][DEM_Y][TYPE_TRAIN].shape ))
#	print("\tY_TEST.shape:"+str ( pakapaka[c][DEM_Y][TYPE_TEST].shape ))
	print("\tY_TEST.mean:%f" % (numpy.mean(pakapaka[c][DEM_Y][TYPE_PREDICT] == pakapaka[c][DEM_Y][TYPE_TEST])) )

import sklearn.neighbors

knn = [[] for j in range(C_MAX)]
for c in range(C_MAX):
	knn[c] = sklearn.neighbors.KNeighborsClassifier(n_neighbors=1)
	knn[c].fit(pakapaka[c][DEM_X][TYPE_TRAIN], pakapaka[c][DEM_Y][TYPE_TRAIN])

for c in range(C_MAX):
	print("Type=%d" % c);
	pakapaka[c][DEM_Y][TYPE_PREDICT] = knn[c].predict(pakapaka[c][DEM_X][TYPE_TEST])
	print("\tY_PREDICT.shape:"+str ( pakapaka[c][DEM_Y][TYPE_PREDICT].shape ))

s

for c in range(C_MAX):
	print("c=%d mean= %f" % (c ,numpy.mean(pakapaka[c][DEM_Y][TYPE_PREDICT] == pakapaka[c][DEM_X][TYPE_TEST])))


s
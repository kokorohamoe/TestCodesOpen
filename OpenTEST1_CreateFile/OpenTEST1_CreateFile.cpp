// OpenTEST1_CreateFile.cpp : アプリケーションのエントリ ポイントを定義します。
//

#include <stdio.h>
#include <stdlib.h>
#include <aclapi.h>

#include "framework.h"
#include "OpenTEST1_CreateFile.h"

#include "Resource.h"

#define MAX_LOADSTRING 100

// グローバル変数:
HINSTANCE hInst;                                // 現在のインターフェイス
WCHAR szTitle[MAX_LOADSTRING];                  // タイトル バーのテキスト
WCHAR szWindowClass[MAX_LOADSTRING];            // メイン ウィンドウ クラス名

// このコード モジュールに含まれる関数の宣言を転送します:
INT_PTR CALLBACK    About(HWND, UINT, WPARAM, LPARAM);



int MOutPutDebugString(const char* fmt, ...)
{
	va_list arg;
	va_start(arg, fmt);



	char buf[1024];
	int n = vsprintf_s(buf, 1024, fmt, arg);
	//	OutputDebugStringA(buf);

		//std::string out;
		//int n = __MOutPutDebugString(out, buf);

	va_end(arg);

	if (n > 0) {
		OutputDebugStringA(buf);
	}


	return n;
}

int MOutPutDebugStringLn(const char* fmt, ...)
{
	va_list arg;
	va_start(arg, fmt);

	char buf[1024];
	vsprintf_s(buf, 1024, fmt, arg);
	int n = MOutPutDebugString(buf);

	va_end(arg);
	if (IsDebuggerPresent()) {
		OutputDebugStringA("\n");
	}

	return n;
}

PSECURITY_ATTRIBUTES MCreateSecurityAttribute(DWORD dwAclSize) {
	//http://s-kita.hatenablog.com/entry/20110407/1302182817
	SECURITY_ATTRIBUTES* psa = new SECURITY_ATTRIBUTES;
	SECURITY_DESCRIPTOR* psd = new SECURITY_DESCRIPTOR;

	InitializeSecurityDescriptor(psd, SECURITY_DESCRIPTOR_REVISION);

	PACL pACL = (PACL)new BYTE[dwAclSize];
	if (pACL == NULL) {
		return NULL;
	}

	InitializeAcl(pACL, dwAclSize, ACL_REVISION);
	BOOL bDACLPresent;
	BOOL bDefault;
	SetSecurityDescriptorDacl(psd, bDACLPresent=TRUE, pACL, bDefault=FALSE);

	psa->nLength = sizeof(SECURITY_ATTRIBUTES);
	psa->bInheritHandle = FALSE;
	psa->lpSecurityDescriptor = psd;

	return psa;
}
PSECURITY_ATTRIBUTES MAddEveryoneToSecurityAttribute(PSECURITY_ATTRIBUTES in) {
	if (in == NULL) {
		return NULL;
	}

	SECURITY_DESCRIPTOR* psd =(SECURITY_DESCRIPTOR*) in->lpSecurityDescriptor;
	PACL pACL = NULL;
	BOOL ret;
	BOOL bDaclPresent = FALSE;
	BOOL bDefault = TRUE;

	ret = GetSecurityDescriptorDacl(psd, &bDaclPresent, &pACL, &bDefault);
	if (!bDaclPresent || !ret) {
		return FALSE;
	}
	SID_IDENTIFIER_AUTHORITY SIDAuthWorld = SECURITY_WORLD_SID_AUTHORITY;
	PSID pEveryoneSID = NULL;
	if (!AllocateAndInitializeSid(&SIDAuthWorld, 1,
		SECURITY_WORLD_RID,
		0, 0, 0, 0, 0, 0, 0,
		&pEveryoneSID))
	{
		return NULL;
	}
	int  DESKTOP_ALL = (DESKTOP_READOBJECTS | DESKTOP_CREATEWINDOW |
		DESKTOP_CREATEMENU | DESKTOP_HOOKCONTROL | DESKTOP_JOURNALRECORD |
		DESKTOP_JOURNALPLAYBACK | DESKTOP_ENUMERATE | DESKTOP_WRITEOBJECTS |
		DESKTOP_SWITCHDESKTOP | STANDARD_RIGHTS_REQUIRED);

	AddAccessAllowedAce(pACL, ACL_REVISION, DESKTOP_ALL, pEveryoneSID);

	//ret = GetSecurityDescriptorDacl(psd, &bDaclPresent, &pACL, &bDefault);


	return in;
}
PSECURITY_ATTRIBUTES MAddCreatorToSecurityAttribute(PSECURITY_ATTRIBUTES in) {
	if (in == NULL) {
		return NULL;
	}

	SECURITY_DESCRIPTOR* psd = (SECURITY_DESCRIPTOR*)in->lpSecurityDescriptor;
	PACL pACL = NULL;
	BOOL ret;
	BOOL bDaclPresent = FALSE;
	BOOL bDefault = TRUE;

	ret = GetSecurityDescriptorDacl(psd, &bDaclPresent, &pACL, &bDefault);
	if (!bDaclPresent || !ret) {
		return FALSE;
	}
	SID_IDENTIFIER_AUTHORITY SIDAuthCreator = SECURITY_CREATOR_SID_AUTHORITY;
	PSID pOwnerSID = NULL;
	if (!AllocateAndInitializeSid(&SIDAuthCreator, 1,
		SECURITY_CREATOR_OWNER_RID,
		0, 0, 0, 0, 0, 0, 0,
		&pOwnerSID))
	{
		return NULL;
	}
	int  DESKTOP_ALL = (DESKTOP_READOBJECTS | DESKTOP_CREATEWINDOW |
		DESKTOP_CREATEMENU | DESKTOP_HOOKCONTROL | DESKTOP_JOURNALRECORD |
		DESKTOP_JOURNALPLAYBACK | DESKTOP_ENUMERATE | DESKTOP_WRITEOBJECTS |
		DESKTOP_SWITCHDESKTOP | STANDARD_RIGHTS_REQUIRED);

	AddAccessAllowedAce(pACL, ACL_REVISION, DESKTOP_ALL, pOwnerSID);

	//ret = GetSecurityDescriptorDacl(psd, &bDaclPresent, &pACL, &bDefault);


	return in;
}
PSECURITY_ATTRIBUTES MAddGuestToSecurityAttribute(PSECURITY_ATTRIBUTES in) {
	if (in == NULL) {
		return NULL;
	}

	SECURITY_DESCRIPTOR* psd = (SECURITY_DESCRIPTOR*)in->lpSecurityDescriptor;
	PACL pACL = NULL;
	BOOL ret;
	BOOL bDaclPresent = FALSE;
	BOOL bDefault = TRUE;

	ret = GetSecurityDescriptorDacl(psd, &bDaclPresent, &pACL, &bDefault);
	if (!bDaclPresent || !ret) {
		return FALSE;
	}

	DWORD dwSidSize = 4096;
	DWORD dwWomainNameSize = 4096;

	PSID pSID =(PSID) new BYTE[dwSidSize];
	SID_NAME_USE use;
	PTSTR DomainName = new TCHAR[dwWomainNameSize];
	memset(DomainName, 0, dwWomainNameSize * sizeof(TCHAR));
	ret = LookupAccountName(0,
		_TEXT("guest"),
		pSID,
		&dwSidSize,
		DomainName,
		&dwWomainNameSize,
		&use);
	if (!ret) {
		return FALSE;
	}
	MOutPutDebugStringLn("DomainName...%ls\n", DomainName);

	int  DESKTOP_ALL = (DESKTOP_READOBJECTS | DESKTOP_CREATEWINDOW |
		DESKTOP_CREATEMENU | DESKTOP_HOOKCONTROL | DESKTOP_JOURNALRECORD |
		DESKTOP_JOURNALPLAYBACK | DESKTOP_ENUMERATE | DESKTOP_WRITEOBJECTS |
		DESKTOP_SWITCHDESKTOP | STANDARD_RIGHTS_REQUIRED);

	AddAccessAllowedAce(pACL, ACL_REVISION, DESKTOP_ALL, pSID);

	//ret = GetSecurityDescriptorDacl(psd, &bDaclPresent, &pACL, &bDefault);


	return in;
}



PSECURITY_ATTRIBUTES GetSecurityAttribute() {
	PSECURITY_ATTRIBUTES psa;

	psa = MCreateSecurityAttribute(1024);
	if (psa) {
		psa = MAddEveryoneToSecurityAttribute(psa);
		if (psa) {
			psa = MAddCreatorToSecurityAttribute(psa);
		}
		if (psa) {
			psa = MAddGuestToSecurityAttribute(psa);
		}
		
	}
	return psa;
}


void TEST_CreateTmpFile() {
	TCHAR* szFileName = NULL;

	szFileName = new TCHAR[1024];

	UINT ret = GetTempFileName(_TEXT(".\\"), _TEXT("pre"), 0, szFileName);
	if (0 == ret)
	{
		MOutPutDebugStringLn("Error %d GetTempFileName...\n", GetLastError());
		return;
	}
	DeleteFile(szFileName);
	HANDLE hTempFile = INVALID_HANDLE_VALUE;

	PSECURITY_ATTRIBUTES psa = GetSecurityAttribute();


	hTempFile = CreateFile(szFileName,
		GENERIC_READ | GENERIC_WRITE,
		0,
		psa,
		CREATE_NEW,
		FILE_ATTRIBUTE_NORMAL,
		NULL);



	if (hTempFile == INVALID_HANDLE_VALUE) {
		MOutPutDebugStringLn("Error %d CreateFile...\n", GetLastError());
		return;
	}
	CloseHandle(hTempFile);
}


INT_PTR CALLBACK DialogFunc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) {

	if (message == WM_COMMAND) {
		int ID = wParam & 0xFFFF;
		if (ID == IDC_BUTTON1) {
			TEST_CreateTmpFile();
		}
		if (ID == IDC_BUTTON2) {
			GetSecurityAttribute();
		}
	}


	return NULL;
	;
}


int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
                     _In_opt_ HINSTANCE hPrevInstance,
                     _In_ LPWSTR    lpCmdLine,
                     _In_ int       nCmdShow)
{
    UNREFERENCED_PARAMETER(hPrevInstance);
    UNREFERENCED_PARAMETER(lpCmdLine);

    // TODO: ここにコードを挿入してください。

    // グローバル文字列を初期化する
    LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
    LoadStringW(hInstance, IDC_OPENTEST1CREATEFILE, szWindowClass, MAX_LOADSTRING);

	HWND hWnd;
	DLGPROC DialogFuncPtr = DialogFunc;
	hWnd = ::CreateDialog(hInstance, MAKEINTRESOURCE(IDD_DIALOG1), ::GetDesktopWindow(), DialogFuncPtr);
	if (hWnd == NULL) {
		return FALSE;
	}
	::ShowWindow(hWnd, SW_SHOW);

    HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_OPENTEST1CREATEFILE));

    MSG msg;

    // メイン メッセージ ループ:
    while (GetMessage(&msg, nullptr, 0, 0))
    {
        if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
        {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
    }

    return (int) msg.wParam;
}



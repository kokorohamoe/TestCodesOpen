// OpenTEST1_CreateFile.cpp : アプリケーションのエントリ ポイントを定義します。
//

#include <stdio.h>
#include <stdlib.h>
#include <aclapi.h>

#include "framework.h"
#include "OpenTEST1_CreateFile.h"

#include "Resource.h"

#define MAX_LOADSTRING 100

// グローバル変数:
HINSTANCE hInst;                                // 現在のインターフェイス
WCHAR szTitle[MAX_LOADSTRING];                  // タイトル バーのテキスト
WCHAR szWindowClass[MAX_LOADSTRING];            // メイン ウィンドウ クラス名

// このコード モジュールに含まれる関数の宣言を転送します:
INT_PTR CALLBACK    About(HWND, UINT, WPARAM, LPARAM);



int MOutPutDebugString(const char* fmt, ...)
{
	va_list arg;
	va_start(arg, fmt);



	char buf[1024];
	int n = vsprintf_s(buf, 1024, fmt, arg);
	//	OutputDebugStringA(buf);

		//std::string out;
		//int n = __MOutPutDebugString(out, buf);

	va_end(arg);

	if (n > 0) {
		OutputDebugStringA(buf);
	}


	return n;
}

int MOutPutDebugStringLn(const char* fmt, ...)
{
	va_list arg;
	va_start(arg, fmt);

	char buf[1024];
	vsprintf_s(buf, 1024, fmt, arg);
	int n = MOutPutDebugString(buf);

	va_end(arg);
	if (IsDebuggerPresent()) {
		OutputDebugStringA("\n");
	}

	return n;
}

PSECURITY_ATTRIBUTES GetSecurityAttribute() {
	PSECURITY_ATTRIBUTES sa;
	PSECURITY_DESCRIPTOR sd;
	PACL pDacl;
	PSID pSid;
	char szDomainName[256] = { '\0' };
	DWORD dwDomainNameSize = sizeof(szDomainName) / sizeof(szDomainName[0]);
	HANDLE hFile;
	DWORD dwAclSize = 1024;

	sd = (PSECURITY_DESCRIPTOR)new BYTE[1024];
	sa = (PSECURITY_ATTRIBUTES)new BYTE[1024];

	InitializeSecurityDescriptor(sd, SECURITY_DESCRIPTOR_REVISION);

	pDacl = (PACL)HeapAlloc(GetProcessHeap(), 0, dwAclSize);
	if (pDacl == NULL) {
		return NULL;
	}

	InitializeAcl(pDacl, dwAclSize, ACL_REVISION);

	SID_IDENTIFIER_AUTHORITY SIDAuthWorld = SECURITY_WORLD_SID_AUTHORITY;
	PSID pEveryoneSID = NULL;
	// Create a well-known SID for the Everyone group.
	if (!AllocateAndInitializeSid(&SIDAuthWorld, 1,
		SECURITY_WORLD_RID,
		0, 0, 0, 0, 0, 0, 0,
		&pEveryoneSID))
	{
		return NULL;
	}

	int  DESKTOP_ALL = (DESKTOP_READOBJECTS | DESKTOP_CREATEWINDOW |
		DESKTOP_CREATEMENU | DESKTOP_HOOKCONTROL | DESKTOP_JOURNALRECORD |
		DESKTOP_JOURNALPLAYBACK | DESKTOP_ENUMERATE | DESKTOP_WRITEOBJECTS |
		DESKTOP_SWITCHDESKTOP | STANDARD_RIGHTS_REQUIRED);

	AddAccessAllowedAce(pDacl, ACL_REVISION, DESKTOP_ALL, pEveryoneSID);

	SetSecurityDescriptorDacl(sd, TRUE, pDacl, FALSE);

	sa->nLength = sizeof(*sa);
	sa->bInheritHandle = FALSE;
	sa->lpSecurityDescriptor = sd;
	return sa;
}


int TEST_2() {
	PSECURITY_ATTRIBUTES sa;
	PSECURITY_DESCRIPTOR sd;
	PACL pDacl;
	PSID pSid;
	char szDomainName[256] = { '\0' };
	DWORD dwDomainNameSize = sizeof(szDomainName) / sizeof(szDomainName[0]);
	HANDLE hFile;
	DWORD dwAclSize = 1024;

	sa = (PSECURITY_ATTRIBUTES)new BYTE[1024];
	sd = (PSECURITY_DESCRIPTOR)new BYTE[1024];

	InitializeSecurityDescriptor(sd, SECURITY_DESCRIPTOR_REVISION);

	pDacl = (PACL)HeapAlloc(GetProcessHeap(), 0, dwAclSize);
	if (pDacl == NULL) {
		return 1;
	}

	InitializeAcl(pDacl, dwAclSize, ACL_REVISION);

	SID_IDENTIFIER_AUTHORITY SIDAuthWorld = SECURITY_WORLD_SID_AUTHORITY;
	PSID pEveryoneSID = NULL;
	// Create a well-known SID for the Everyone group.
	if (!AllocateAndInitializeSid(&SIDAuthWorld, 1,
		SECURITY_WORLD_RID,
		0, 0, 0, 0, 0, 0, 0,
		&pEveryoneSID))
	{
		return NULL;
	}

	int DESKTOP_ALL = (DESKTOP_READOBJECTS | DESKTOP_CREATEWINDOW | \
		DESKTOP_CREATEMENU | DESKTOP_HOOKCONTROL | DESKTOP_JOURNALRECORD | \
		DESKTOP_JOURNALPLAYBACK | DESKTOP_ENUMERATE | DESKTOP_WRITEOBJECTS | \
		DESKTOP_SWITCHDESKTOP | STANDARD_RIGHTS_REQUIRED);

	AddAccessAllowedAce(pDacl, ACL_REVISION, DESKTOP_ALL, pEveryoneSID);



	SetSecurityDescriptorDacl(&sd, TRUE, pDacl, FALSE);

	sa->nLength = sizeof(SECURITY_ATTRIBUTES);
	sa->bInheritHandle = FALSE;
	sa->lpSecurityDescriptor = sd;

	//7.reateFile関数の第４引数に、SECURITY_ATTRIBUTES型オブジェクトへのポインタを渡し、
	//CreateFile関数を呼び出す
	hFile = CreateFile(TEXT("test2.txt"),
		GENERIC_READ | GENERIC_WRITE,
		0,
		sa,
		CREATE_NEW,
		FILE_ATTRIBUTE_NORMAL,
		NULL);
	if (hFile != INVALID_HANDLE_VALUE) {
		CloseHandle(hFile);
	}


	return 1;
}



PSECURITY_ATTRIBUTES GetSecurityAttribute4()
{

	BOOL ret;

	static SECURITY_ATTRIBUTES sa;
	static SECURITY_DESCRIPTOR sd;

	PACL pDacl;

	SID_IDENTIFIER_AUTHORITY SIDAuthWorld = SECURITY_WORLD_SID_AUTHORITY;
	PSID pEveryoneSID = NULL;
	// Create a well-known SID for the Everyone group.
	if (!AllocateAndInitializeSid(&SIDAuthWorld, 1,
		SECURITY_WORLD_RID,
		0, 0, 0, 0, 0, 0, 0,
		&pEveryoneSID))
	{
		MOutPutDebugStringLn("AllocateAndInitializeSid Error %u\n", GetLastError());
		return NULL;
	}


	DWORD dwAclSize = 1024;
	pDacl = (PACL) new BYTE[dwAclSize];
	InitializeAcl(pDacl, dwAclSize, ACL_REVISION);

	int  DESKTOP_ALL = (DESKTOP_READOBJECTS | DESKTOP_CREATEWINDOW |
		DESKTOP_CREATEMENU | DESKTOP_HOOKCONTROL | DESKTOP_JOURNALRECORD |
		DESKTOP_JOURNALPLAYBACK | DESKTOP_ENUMERATE | DESKTOP_WRITEOBJECTS |
		DESKTOP_SWITCHDESKTOP | STANDARD_RIGHTS_REQUIRED);
	ret = AddAccessAllowedAce(pDacl, ACL_REVISION, DESKTOP_ALL, pEveryoneSID);

	InitializeSecurityDescriptor(&sd, SECURITY_DESCRIPTOR_REVISION);

	SetSecurityDescriptorDacl(&sd, TRUE, pDacl, FALSE);

	sa.nLength = sizeof(sa);
	sa.bInheritHandle = FALSE;
	sa.lpSecurityDescriptor = &sd;


	return &sa;
}



int TEST_Test2_Org() {
//http://s-kita.hatenablog.com/entry/20110407/1302182817
	SECURITY_ATTRIBUTES sa;
	SECURITY_DESCRIPTOR sd;
	PACL pDacl;
	char szDomainName[256] = { '\0' };
	DWORD dwDomainNameSize = sizeof(szDomainName) / sizeof(szDomainName[0]);
	HANDLE hFile;
	DWORD dwAclSize = 1024;



	//1.セキュリティ記述子を初期化する
	InitializeSecurityDescriptor(&sd, SECURITY_DESCRIPTOR_REVISION);

	//2.LookupAccountName関数で、指定したユーザーアカウントに対するSIDを取得する

	pDacl = (PACL)HeapAlloc(GetProcessHeap(), 0, dwAclSize);
	if (pDacl == NULL) {
		return 1;
	}

	//3.DACL(随意アクセス制御リスト)を初期化する
	InitializeAcl(pDacl, dwAclSize, ACL_REVISION);


	SID_IDENTIFIER_AUTHORITY SIDAuthWorld = SECURITY_WORLD_SID_AUTHORITY;
	PSID pEveryoneSID = NULL;
	// Create a well-known SID for the Everyone group.
	if (!AllocateAndInitializeSid(&SIDAuthWorld, 1,
		SECURITY_WORLD_RID,
		0, 0, 0, 0, 0, 0, 0,
		&pEveryoneSID))
	{
		return NULL;
	}

	int  DESKTOP_ALL = (DESKTOP_READOBJECTS | DESKTOP_CREATEWINDOW | 
		DESKTOP_CREATEMENU | DESKTOP_HOOKCONTROL | DESKTOP_JOURNALRECORD | 
		DESKTOP_JOURNALPLAYBACK | DESKTOP_ENUMERATE | DESKTOP_WRITEOBJECTS | 
		DESKTOP_SWITCHDESKTOP | STANDARD_RIGHTS_REQUIRED);

	AddAccessAllowedAce(pDacl, ACL_REVISION, DESKTOP_ALL, pEveryoneSID);



	//5.セキュリティ記述子にDACLの情報を設定する
	SetSecurityDescriptorDacl(&sd, TRUE, pDacl, FALSE);

	//6.SECURITY_ATTRIBUTES（セキュリティ属性）オブジェクトの各メンバ(オブジェクトのサイズ、
	//ハンドル継承の有無、セキュリティ記述子)に値をセットする
	sa.nLength = sizeof(sa);
	sa.bInheritHandle = FALSE;
	sa.lpSecurityDescriptor = &sd;

	//7.reateFile関数の第４引数に、SECURITY_ATTRIBUTES型オブジェクトへのポインタを渡し、
	//CreateFile関数を呼び出す
	hFile = CreateFile(TEXT("test3.txt"),
		GENERIC_READ | GENERIC_WRITE,
		0,
		&sa,
		CREATE_NEW,
		FILE_ATTRIBUTE_NORMAL,
		NULL);
	if (hFile != INVALID_HANDLE_VALUE) {
		CloseHandle(hFile);
	}



}

void TEST_CreateTmpFile() {
	TEST_2();
	return;
	TCHAR* szFileName = NULL;

	szFileName = new TCHAR[1024];

	UINT ret = GetTempFileName(_TEXT(".\\"), _TEXT("pre"), 0, szFileName);
	if (0 == ret)
	{
		MOutPutDebugStringLn("Error %d GetTempFileName...\n", GetLastError());
		return;
	}

	HANDLE hTempFile = INVALID_HANDLE_VALUE;

	PSECURITY_ATTRIBUTES psa = GetSecurityAttribute();

	hTempFile = CreateFile((LPTSTR)szFileName, // file name 
		GENERIC_WRITE | GENERIC_READ,        // open for write 
		0,                    // do not share 
		psa,                 // default security 
		CREATE_ALWAYS,        // overwrite existing
		FILE_ATTRIBUTE_NORMAL,// normal file 
		NULL);                // no template 
	if (hTempFile == INVALID_HANDLE_VALUE) {
		MOutPutDebugStringLn("Error %d CreateFile...\n", GetLastError());
		return;
	}
	CloseHandle(hTempFile);
}


INT_PTR CALLBACK DialogFunc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) {

	if (message == WM_COMMAND) {
		int ID = wParam & 0xFFFF;
		if (ID == IDC_BUTTON1) {
			TEST_CreateTmpFile();
		}
		if (ID == IDC_BUTTON2) {
			TEST_Test2_Org();
		}
	}


	return NULL;
	;
}


int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
                     _In_opt_ HINSTANCE hPrevInstance,
                     _In_ LPWSTR    lpCmdLine,
                     _In_ int       nCmdShow)
{
    UNREFERENCED_PARAMETER(hPrevInstance);
    UNREFERENCED_PARAMETER(lpCmdLine);

    // TODO: ここにコードを挿入してください。

    // グローバル文字列を初期化する
    LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
    LoadStringW(hInstance, IDC_OPENTEST1CREATEFILE, szWindowClass, MAX_LOADSTRING);

	HWND hWnd;
	DLGPROC DialogFuncPtr = DialogFunc;
	hWnd = ::CreateDialog(hInstance, MAKEINTRESOURCE(IDD_DIALOG1), ::GetDesktopWindow(), DialogFuncPtr);
	if (hWnd == NULL) {
		return FALSE;
	}
	::ShowWindow(hWnd, SW_SHOW);

    HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_OPENTEST1CREATEFILE));

    MSG msg;

    // メイン メッセージ ループ:
    while (GetMessage(&msg, nullptr, 0, 0))
    {
        if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
        {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
    }

    return (int) msg.wParam;
}


